# This action updates the version of the repository based on the branch name and latest tag.
# To update major version branch, you must run the following commands, for example from v2 to v3:
# git tag 3.0.0
# git push origin 3.0.0
# To update minor version branch, you must run the following commands, for example from v2.0 to v2.1:
# git tag 2.1.0
# git push origin 2.1.0
# To update patch version branch, nothing else is required.
name: Update repo version
description: Updates the version of the repo based on the branch name and latest tag.

inputs:
  snapshot_suffix:
    description: 'Suffix for snapshot versions'
    required: false
    default: 'SNAPSHOT'
outputs:
  version:
    description: 'The version to be used for the Docker image'
    value: ${{ steps.vars.outputs.version }}
runs:
  using: 'composite'
  steps:
  - name: Set version variables
    id: vars
    shell: bash
    env:
      LATEST_TAG: $(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
      SNAPSHOT_SUFFIX: ${{ inputs.snapshot_suffix }}
    run: |
      latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
      IFS='.' read -r major minor patch <<<"${latest_tag#v}"
      version="${major}.${minor}.${patch}"

      if [[ "${GITHUB_REF}" == refs/heads/main ]]; then
        patch=$((patch+1))
        new_version="v${major}.${minor}.${patch}"
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "# --- Release version --- #"
        echo "Previous Version: $latest_tag"
        echo "New version: $new_version"
      else
        # For feature branches, use snapshot 
        snap_version=${version}-${SNAPSHOT_SUFFIX}
        echo "version=${snap}" >> $GITHUB_OUTPUT
        echo "# --- Snapshot version --- #"
        echo "Snapshot version: $snap_version"
      fi
