# This action updates the version of the repository based on the branch name and latest tag.
# To update major version branch, you must run the following commands, for example from v2 to v3:
# git tag 3.0.0
# git push origin 3.0.0
name: Update repo version
description: Updates the version of the repo based on the branch name and latest tag.

inputs:
  snapshot_suffix:
    description: 'Suffix for snapshot versions'
    required: false
    default: 'snapshot'
outputs:
  version:
    description: 'The version to be used for the Docker image'
    value: ${{ steps.vars.outputs.version }}
  major:
    description: 'The major version to be used for the Docker image'
    value: ${{ steps.vars.outputs.major }}
  is_release:
    description: 'Indicates if this is a release version'
    value: ${{ steps.vars.outputs.is_release }}
runs:
  using: 'composite'
  steps:
  - name: Set version variables
    id: vars
    shell: bash
    run: |
      if [[ "${GITHUB_REF}" == refs/heads/main ]]; then
        # Get latest tag, bump patch version
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        IFS='.' read -r major minor patch <<<"${latest_tag#v}"
        patch=$((patch+1))
        new_version="v${major}.${minor}.${patch}"
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "major=v${major}" >> $GITHUB_OUTPUT
        echo "is_release=true" >> $GITHUB_OUTPUT
      else
        # For feature branches, use snapshot version
        branch="${GITHUB_REF#refs/heads/}"
        echo "version=${branch}-${{ inputs.snapshot_suffix }}" >> $GITHUB_OUTPUT
        echo "is_release=false" >> $GITHUB_OUTPUT
      fi
